% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/form_trans.R
\name{form_trans}
\alias{form_trans}
\alias{form_trans_self}
\title{Transform pdqr-function}
\usage{
form_trans(f_list, trans, ..., method = "random", n_sample = 10000,
  args_new = list())

form_trans_self(f, trans, ..., method = "random", args_new = list())
}
\arguments{
\item{f_list}{A list consisting from pdqr-function(s) and/or number(s).
Should have at least one pdqr-function (see Details).}

\item{trans}{Transformation function. Should take as many (vectorized)
arguments as there are elements in \code{f_list}.}

\item{...}{Extra arguments to \code{trans}.}

\item{method}{Transformation method. One of "random" or "bruteforce".}

\item{n_sample}{Number of elements to sample.}

\item{args_new}{List of extra arguments for \link[=new_d]{new_*()} to control
\code{\link[=density]{density()}}.}

\item{f}{A pdqr-function.}
}
\value{
A pdqr-function for transformed random variable.
}
\description{
Perform a transformation of pdqr-function(s).
}
\examples{
# Default "random" transformation
d_norm <- as_d(dnorm)
d_norm_2 <- form_trans(list(d_norm, d_norm), trans = `+`)
plot(d_norm_2)
lines(as_d(dnorm, sd = 2), col = "red")

# Transformation with "bruteforce" method
power <- function(x, n = 1) {x^n}
p_fin <- new_p(data.frame(x = 1:3, prob = c(0.1, 0.2, 0.7)), type = "fin")

p_fin_sq <- form_trans_self(
  p_fin, trans = power, n = 2, method = "bruteforce"
)
meta_x_tbl(p_fin_sq)
  # Compare with "random" method
p_fin_sq_rand <- form_trans_self(p_fin, trans = power, n = 2)
meta_x_tbl(p_fin_sq_rand)

}
